version: 2.1
commands:
  save_env:
    steps:
      - run:
          name: "Persist some variables in the workspace"
          command: |
            mkdir -p ~/cananolab/workspace
            echo "export TIER=${TIER}" >> ~/cananolab/workspace/env-vars
      - persist_to_workspace:
          root: workspace
          paths:
            - env-vars
  detect_tier:
    steps:
      - run:
          name: "Detect and set the tier"
          command: |
            TIER=DEV
            if [[ -n ${CIRCLE_TAG} ]]; then
              if [[ ${CIRCLE_TAG} =~ [0-9\.\-]+-r$ ]]; then
                TIER=PROD
                CIRCLE_BRANCH=prod
              elif [[ ${CIRCLE_TAG} =~ [0-9\.\-]+-rc$ ]]; then
                TIER=TEST
                CIRCLE_BRANCH=test
              else
                echo "Tier not identifiable via tag name ${CIRCLE_TAG}, defaulting to DEV." 
              fi
            elif [[ ${CIRCLE_BRANCH} =~ (prod|uat|test).* ]]; then
              TIER=$(awk -F[\-_] '{print toupper($1)}' \<<< ${CIRCLE_BRANCH})
            fi
            echo "export TIER=${TIER}" >> $BASH_ENV
            echo "Tier was identified as ${TIER} for branch ${CIRCLE_BRANCH}"
  deployment_setup:
    steps:
      - run:
          name: "Assign Project-level vars"
          command: |
            if [ ! -f deployment.key.json ]; then
              echo "Deployment JSON keyfile not found - loading from CircleCI."
              KEY=${DEPLOYMENT_KEY_ISB_CANANO_DEV}
            else
              echo "Deployment JSON keyfile found."
              KEY="NA"
            fi
            CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CANANO_DEV}
            PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CANANO_DEV}
            BUCKET=${DEPLOYMENT_BUCKET_ISB_CANANO_DEV}
            if [[ ${TIER} == "PROD" ]]; then
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CANANO_PROD}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CANANO_PROD}
              BUCKET=${DEPLOYMENT_BUCKET_ISB_CANANO_PROD}
              KEY=${DEPLOYMENT_KEY_ISB_CANANO_PROD}
            elif [[ ${TIER} == "UAT" ]]; then
              KEY=${DEPLOYMENT_KEY_ISB_CANANO_UAT}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CANANO_UAT}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CANANO_UAT}
              BUCKET=${DEPLOYMENT_BUCKET_ISB_CANANO_UAT}
            elif [[ ${TIER} == "TEST" ]]; then
              KEY=${DEPLOYMENT_KEY_ISB_CANANO_TEST}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CANANO_TEST}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CANANO_TEST}
              BUCKET=${DEPLOYMENT_BUCKET_ISB_CANANO_TEST}
            elif [[ ${TIER} == "DEV" ]]; then
              echo "Using default deployment configuration for tier ${TIER}"
            else
              echo "[ERROR] - Unrecognized tier: ${TIER} - exitng."
              exit 1
            fi

            echo "export DEPLOYMENT_KEY=\"${KEY}\"" >> $BASH_ENV
            echo "export DEPLOYMENT_CLIENT_EMAIL=${CLIENT_EMAIL}" >> $BASH_ENV
            echo "export DEPLOYMENT_PROJECT_ID=${PROJECT_ID}" >> $BASH_ENV
            echo "export DEPLOYMENT_BUCKET=${BUCKET}" >> $BASH_ENV

  deployment_config:
    steps:
      - run:
          name: "Set tier-specific configuration file"
          command: |
            sudo -E /bin/bash ./shell/pull-config.sh
            xargs -a deployment_config.txt -I{} echo "export {}" >> $BASH_ENV

  auth:
    steps:
      - run:
          name: "Service Account Auth and Project Settings"
          command: |
            sudo -E /bin/bash ./shell/gcloud-authentication.sh

  install_cloud_sdk:
    steps:
      - run:
          name: "Install CloudSDK and Java components"
          command: |
            echo "export CLOUDSDK_CORE_DISABLE_PROMPTS=1" >> $BASH_ENV
            sudo apt-get update -qq
            sudo apt-get install ca-certificates python3-distutils apt-transport-https gnupg
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update -qq
            sudo apt-get -y install google-cloud-sdk google-cloud-sdk-app-engine-java
jobs:
  build_job:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    working_directory: ~/cananolab
    docker:
      - image: cimg/openjdk:8.0.302
      - image: cimg/mysql:5.7.36
        environment:
          MYSQL_ROOT_HOST: "%"
          MYSQL_USER: ubuntu
          MYSQL_PASSWORD: "isb"
          MYSQL_ROOT_PASSWORD: "isb"
    steps:
      - checkout
      - run:
          name: "Set the Application hash"
          command: |
            SHA=$(git rev-list -1 HEAD)
            echo "export APP_SHA=${SHA:0:7}" >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: |
            sudo -E /bin/bash ./shell/install-deps.sh
      - install_cloud_sdk
      - detect_tier
      - deployment_setup
      - auth
      - deployment_config
      - run:
          name: Staging
          command: |
            sudo -E /bin/bash ./shell/gcloud-pull-staging-files.sh
      - run:
          name: Compare Config
          command: |
            echo "Compare config files"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/deployment_config.txt"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/${WEBAPP_APP_YAML}"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/${WEBAPP_ENV_FILE}"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/${BUILD_PROPERTIES}"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/${PROJECT_PROPERTIES}"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/maven-settings.xml"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/standalone-full.xml"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/standalone.conf"
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEPLOYMENT_BUCKET}/log4j2.xml"
      - run:
          name: Build
          command: |
            sudo -E /bin/bash ./shell/run-build.sh
      - save_cache:
          key: isb-canano-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
          paths:
            - ./staged
            - ./shell
            - ./NOTICE
            - ./LICENSE
            - ./CONTRIBUTING.rst
            - ./package.json
            - ./my.conf.js
            - ./app.yaml
            - ./Dockerfile
      - save_env
  deploy_job:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    docker:
      - image: cimg/openjdk:8.0.302
    working_directory: ~/cananolab
    steps:
      - restore_cache:
          keys:
            - isb-canano-{{ .Branch }}-{{ .Revision }}-
      - attach_workspace:
          at: ~/cananolab/workspace
      - run:
          name: Restore persisted environment variables
          command: |
            if [ -f ~/cananolab/workspace/env-vars ]; then
              echo "Persisted environment variables found, loading."
              cat ~/cananolab/workspace/env-vars >> $BASH_ENV
            else
              echo "Persisted environment variables not found!"
              exit 1
            fi
      - install_cloud_sdk
      - deployment_setup
      - auth
      - deployment_config
      - deploy:
          nane: Deployment
          command: |
            sudo -E gcloud app deploy --verbosity=debug ./app.yaml --service-account=${WEB_RUNTIME_SA_NAME} --quiet
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_job:
          filters:
            tags:
              only: /.*/
      - deploy_job:
          requires:
            - build_job
          filters:
            branches:
              only:
                - master
                - test
                - uat
            tags:
              only: /.*/
