<?xml version="1.0" encoding="utf-8" ?>

<!--L
   Copyright Leidos
   Copyright Leidos Biomedical

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/cananolab/LICENSE.txt for details.
L-->

<project name="cananolab-webapp" default="dist" basedir="."
		 xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors"
		 xmlns:resolver="antlib:org.apache.maven.resolver.ant"
>
	<description>
		This is the build file for the caNanoLab webapp project.
	</description>

	<property file="build.properties"/>
	<property file="project.properties"/>
	<property name="src-cfg" location="${basedir}/src/main/config"/>
	<property name="src-resources" location="${basedir}/src/main/resources"/>
	<property name="src.dir" location="${basedir}/src/main/java"/>
	<property name="domainsrc.dir" location="${basedir}/src-domain"/>
	<property name="webroot.dir" location="${basedir}/web"/>
	<property name="image.dir" location="${webroot.dir}/images"/>
	<property name="build.dir" location="${basedir}/build"/>
	<property name="domainbuild.dir" location="${basedir}/domainbuild"/>
	<property name="common.dir" location="${basedir}/../common"/>
	<property name="commonlib.dir" location="${basedir}/lib"/>
	<property name="target.dir" location="${basedir}/target"/>
	<property name="deps.dir" location="${target.dir}/deps"/>
	<property name="dist.dir" location="${target.dir}/dist"/>
	<property name="common.dist.dir" location="${dist.dir}/common"/>
	<property name="classes.dir" location="${basedir}/build/WEB-INF/classes"/>
	<property name="lib.dir" location="${basedir}/build/WEB-INF/lib"/>
	<!--	<property name="globus.dir" location="../cananolab-client/lib/globus"/>-->
	<property name="db.dir" location="${basedir}/lib"/>

	<property name="test.dir" value="test-rest"/>
	<property name="test.src.dir" value="${test.dir}/java"/>
	<property name="report.dir" location="${test.dir}/junitreport"/>
	<property name="logLevel" value="info"/>

	<!-- antcontrib task-->
	<path id="common.classpath">
		<fileset dir="${commonlib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/cglib-2.1.3.jar"/>
			<exclude name="**/spring.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
		<fileset dir="${test.dir}/lib" includes="**/*.jar"/>
	</path>

	<property name="ant.contrib.location" value="${commonlib.dir}/ant-contrib-1.0b3.jar"/>
	<!-- using ant contrib for contidionals, looping , and runtarget -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ant.contrib.location}"/>
		</classpath>
	</taskdef>
	<taskdef uri="antlib:org.apache.maven.resolver.ant" resource="org/apache/maven/resolver/ant/antlib.xml">
		<classpath>
			<fileset dir="${commonlib.dir}" includes="maven-resolver-ant-tasks-*uber.jar"/>
		</classpath>
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="common.classpath"/>

	<delete dir="${deps.dir}"/>

	<resolver:pom file="pom.xml" id="pom"/>

	<resolver:resolve>
		<resolver:dependencies>
			<resolver:pom refid="pom"/>
		</resolver:dependencies>
		<resolver:path refid="compiletime.dependencies.path" classpath="compile" />
		<resolver:files refid="compiletime.dependencies" dir="${deps.dir}/compile" layout="{artifactId}-{version}.{extension}"/>
	</resolver:resolve>

	<resolver:resolve>
		<resolver:dependencies>
			<resolver:pom refid="pom" />
		</resolver:dependencies>
		<resolver:path refid="runtime.dependencies.path" classpath="runtime" />
		<resolver:files refid="runtime.dependencies" dir="${deps.dir}/runtime"  layout="{artifactId}-{version}.{extension}" scopes="compile" />
	</resolver:resolve>

	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${target.dir}/classes"/>
		<delete dir="${target.dir}/test-classes"/>
		<delete dir="${common.dist.dir}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${domainbuild.dir}"/>
	</target>

	<target name="init" depends="clean">
		<!-- create the necessary folders -->
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${domainbuild.dir}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/WEB-INF"/>
		<mkdir dir="${build.dir}/WEB-INF/classes"/>
		<mkdir dir="${build.dir}/WEB-INF/lib"/>
		<filterset id="properties.filterset">
			<filter token="FILE_REPOSITORY_DIR" value="${file.repository.dir}"/>
			<filter token="ADMIN_EMAIL" value="${admin.email}"/>
			<!--			<filter token="ONLINE_HELP_URL" value="${online.help.url}"/>-->
			<!--			<filter token="USE_LDAP" value="${ldap.authentication.enabled}"/>-->
		</filterset>
	</target>

	<target name="compile" depends="jar:beano">
		<echo message="*****************************************************"/>
		<echo message="**   Compiling Java Classes ...          		  **"/>
		<echo message="*****************************************************"/>

		<path id="classpath">
			<fileset dir="${commonlib.dir}">
				<exclude name="**/sdk/*.jar"/>
				<include name="caNanoLab-beans.jar"/>
				<exclude name="**/globus/*.jar"/>
				<exclude name="**/ant-contrib-*.jar"/>
				<exclude name="maven-resolver-ant-tasks-*uber.jar"/>
			</fileset>
		</path>
		<javac srcdir="${src.dir}" destdir="${build.dir}/WEB-INF/classes" debug="true" source="1.8" target="1.8">
			<classpath refid="classpath"/>
			<classpath refid="compiletime.dependencies.path"  />
		</javac>
	</target>
	<target name="compile-beans" depends="init">
		<echo message="*****************************************************"/>
		<echo message="**   Compiling caNanoLab-beans.jar ...          		  **"/>
		<echo message="*****************************************************"/>

		<path id="classpath">
			<fileset dir="${commonlib.dir}">
				<exclude name="**/sdk/*.jar"/>
				<exclude name="**/globus/*.jar"/>
				<exclude name="**/ant-contrib-*.jar"/>
			</fileset>
		</path>
		<javac srcdir="${domainsrc.dir}" destdir="${domainbuild.dir}" debug="true" source="1.8" target="1.8">
			<classpath refid="classpath"/>
			<classpath refid="compiletime.dependencies.path" />
		</javac>
	</target>

	<target name="war" depends="clean, compile, jar:beano">

		<!--copy properties files -->
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src-cfg}">
				<include name="**/*.properties"/>
				<exclude name="caNanoLab.properties"/>
			</fileset>
		</copy>

		<copy overwrite="true" tofile="${build.dir}/WEB-INF/classes/caNanoLab.properties"
			  file="${src-cfg}/caNanoLab.properties.template">
			<!-- replace tokens with values from build properties -->
			<filterset refid="properties.filterset"/>
		</copy>

		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src-resources}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>

		<!-- copy web files and lib files -->
		<copy todir="${build.dir}">
			<fileset dir="${webroot.dir}">
				<exclude name="**/*.mex"/>
				<exclude name="**/WEB-INF/classes/**"/>
				<exclude name="**/WEB-INF/.env"/>
			</fileset>
		</copy>

		<!--copy env file -->
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${webroot.dir}/WEB-INF">
				<include name=".env"/>
			</fileset>
		</copy>

		<!--copy hibernate xml files -->
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<!--copy config xml files -->
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src-cfg}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<!-- modify ehcache directory -->
		<replace file="${build.dir}/WEB-INF/classes/ehcache.xml" token="java.io.tmpdir" value="${ehcache.path}"/>

		<!-- copy dependency jars to WEB-INF/lib files  -->
		<copy todir="${build.dir}/WEB-INF/lib">
			<fileset dir="${deps.dir}/runtime">
				<exclude name="**/log4j-1.2.13.jar" />
			</fileset>
		</copy>

		<!-- copy jars from common/lib -->
		<copy todir="${build.dir}/WEB-INF/lib">
			<!--			<fileset dir="${common.dir}/lib">-->
			<fileset dir="${commonlib.dir}">
				<include name="**/*.jar"/>
				<exclude name="**/sdk/*.jar"/>
				<exclude name="**/cglib-2.1.3.jar"/>
				<exclude name="**/spring.jar"/>
				<exclude name="**/log4j-1.2.13.jar" />
			</fileset>
			<!--			<fileset dir="${common.dir}/lib">-->
			<fileset dir="${commonlib.dir}">
				<include name="cananolab-beans.jar"/>
			</fileset>
		</copy>

		<!-- tag footer with release version and build tag -->
		<property name="build_tag" value="trunk"/>
		<propertyregex override="true" property="build_tag" input="${build.tag}"
					   regexp="\$HeadURL\: .*/cananolab/tags/([^/]*)/.*" select="\1"/>

		<!-- package WAR file -->
		<jar destfile="${dist.dir}/caNanoLab.war" basedir="${build.dir}"/>
	</target>

	<target name="dist" depends="war">
		<!-- copy database jdbc driver and socket factory to common dist-->
		<copy todir="${common.dist.dir}" overwrite="true">
			<restrict>
				<fileset refid="compiletime.dependencies"/>
				<rsel:name name="**mysql*.jar"/>
			</restrict>
		</copy>

		<!-- copy bouncy castle from common lib-->
		<copy todir="${common.dist.dir}" overwrite="true">
			<restrict>
				<fileset refid="compiletime.dependencies"/>
				<rsel:name name="**bcprov*.jar"/>
			</restrict>
		</copy>

		<!--copy mysql-ds.xml and replace database connection info-->
		<copy overwrite="true" tofile="${common.dist.dir}/mysql-ds.xml"
			  file="${common.dir}/resources/jboss-conf/mysql-ds.xml">
			<!-- replace tokens with values from build properties -->
			<filterset id="db.filterset">
				<filter token="database.url" value="${database.url}"/>
				<filter token="database.user" value="${database.user}"/>
				<filter token="database.password" value="${database.password}"/>
			</filterset>
		</copy>
		<!--		<if>-->
		<!--			&lt;!&ndash;if use LDAP authentication, replace ldap tokens from build properties &ndash;&gt;-->
		<!--			<equals arg1="${ldap.authentication.enabled}" arg2="true"/>-->
		<!--			<then>-->
		<!--				<echo message="Using LDAP authenication"/>-->
		<!--				<copy overwrite="true" tofile="${common.dist.dir}/login-config.xml"-->
		<!--					  file="${common.dir}/resources/jboss-conf/login-config-ldap.xml">-->
		<!--					<filterset>-->
		<!--						<filter token="ldap.host.url" value="${ldap.host.url}"/>-->
		<!--						<filter token="ldap.searchable.base" value="${ldap.searchable.base}"/>-->
		<!--						<filter token="ldap.userId.label" value="${ldap.userId.label}"/>-->
		<!--					</filterset>-->
		<!--				</copy>-->
		<!--			</then>-->
		<!--			&lt;!&ndash;if use database authentication, replace database tokens from build properties &ndash;&gt;-->
		<!--			<else>-->
		<copy overwrite="true" tofile="${common.dist.dir}/login-config.xml"
			  file="${common.dir}/resources/jboss-conf/login-config-db.xml">
			<!-- replace tokens with values from build properties -->
			<filterset refid="db.filterset"/>
		</copy>
		<!--			</else>-->
		<!--		</if>-->
		<!-- the following is UPT specific -->
		<!-- copy UPT required config files -->
		<!--		<copy overwrite="true" tofile="${common.dist.dir}/ApplicationSecurityConfig.xml" file="${common.dir}/resources/jboss-conf/ApplicationSecurityConfig.xml">-->
		<!--			&lt;!&ndash; replace tokens with values from build properties &ndash;&gt;-->
		<!--			<filterset>-->
		<!--				<filter token="jboss.server.dir" value="${jboss.server.dir}" />-->
		<!--			</filterset>-->
		<!--		</copy>-->
		<!--		<copy overwrite="true" tofile="${common.dist.dir}/properties-service.xml" file="${common.dir}/resources/jboss-conf/properties-service.xml">-->
		<!--			&lt;!&ndash; replace tokens with values from build properties &ndash;&gt;-->
		<!--			<filterset>-->
		<!--				<filter token="jboss.server.dir" value="${jboss.server.dir}" />-->
		<!--			</filterset>-->
		<!--		</copy>-->
		<!--		<copy overwrite="true" tofile="${common.dist.dir}/csmupt.csm.new.hibernate.cfg.xml" file="${common.dir}/resources/jboss-conf/csmupt.csm.new.hibernate.cfg.xml" />-->
		<!--		<copy overwrite="true" tofile="${common.dist.dir}/csmupt423.csm.new.hibernate.cfg.xml" file="${common.dir}/resources/jboss-conf/csmupt423.csm.new.hibernate.cfg.xml" />-->

		<!--copy upt-ds.xml and replace database connection info-->
		<!--		<copy overwrite="true" tofile="${common.dist.dir}/upt-ds.xml" file="${common.dir}/resources/jboss-conf/upt-ds.xml">-->
		<!--			&lt;!&ndash; replace tokens with values from build properties &ndash;&gt;-->
		<!--			<filterset id="db.filterset">-->
		<!--				<filter token="database.url" value="${database.url}" />-->
		<!--				<filter token="database.user" value="${database.user}" />-->
		<!--				<filter token="database.password" value="${database.password}" />-->
		<!--			</filterset>-->
		<!--		</copy>-->

		<!--copy uptEAR.ear -->
		<!--copy overwrite="true" todir="${common.dist.dir}" file="${common.dir}/resources/security/uptEAR.ear" /-->

		<!--copy csmapi-5.2.jar -->
		<!--		<copy overwrite="true" todir="${common.dist.dir}" file="${commonlib.dir}/sdk/csmapi-5.2.jar" />-->

		<!--copy bcprov-jdk15on-1.47.jar -->
		<!--		<copy overwrite="true" todir="${common.dist.dir}" file="${commonlib.dir}/sdk/bcprov-jdk15on-1.47.jar"/>-->

		<copy overwrite="true" todir="${common.dist.dir}" file="${common.dir}/resources/help/wikihelp.properties"/>

		<!--copy images -->
		<copy overwrite="true" todir="${common.dist.dir}" file="${image.dir}/canano_logo_mini.jpg"/>

		<copy overwrite="true" todir="${common.dist.dir}" file="${image.dir}/doi-transparent.png"/>

		<!--copy caNanoLab_setup.cli and replace database connection info-->
		<copy overwrite="true" tofile="${common.dist.dir}/caNanoLab_setup.cli" file="${basedir}/caNanoLab_setup.cli">
			<!-- replace tokens with values from build properties -->
			<filterset id="db.filterset">
				<filter token="database.url" value="${database.url}&amp;serverTimezone=UTC"/>
				<filter token="database.user" value="${database.user}"/>
				<filter token="database.password" value="${database.password}"/>
				<filter token="logLevel" value="${logLevel}"/>
				<filter token="file.repository.dir" value="${file.repository.dir}"/>
				<filter token="client.port" value="${client.port}"/>
			</filterset>
		</copy>
		<copy overwrite="true" tofile="${common.dist.dir}/caNanoLab_checks.cli"
			  file="${basedir}/caNanoLab_checks.cli">
			<filterset>
				<filter token="client.port" value="${client.port}"/>
			</filterset>
		</copy>
		<copy overwrite="true" tofile="${common.dist.dir}/caNanoLab_modules.cli"
			  file="${basedir}/caNanoLab_modules.cli">
			<filterset>
				<filter token="file.repository.dir" value="${file.repository.dir}"/>
				<filter token="client.port" value="${client.port}"/>
			</filterset>
		</copy>
		<copy overwrite="true" tofile="${common.dist.dir}/caNanoLab_deploy.cli"
			  file="${basedir}/caNanoLab_deploy.cli">
			<filterset>
				<filter token="file.repository.dir" value="${file.repository.dir}"/>
				<filter token="client.port" value="${client.port}"/>
			</filterset>
		</copy>

	</target>

	<target name="deploy" depends="dist">
		<!-- deploy WAR and xml to JBOSS deploy location-->
		<copy todir="${jboss.deploy.dir}" overwrite="true">
			<fileset dir="${common.dist.dir}">
				<!--				<include name="upt-ds.xml" />-->
				<include name="${database.type}-ds.xml"/>
				<include name="properties-service.xml"/>
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="caNanoLab.war"/>
			</fileset>
		</copy>
		<copy todir="${jboss.conf.dir}" overwrite="true" file="${common.dist.dir}/login-config.xml"/>
	</target>

	<target name="deploy_local" depends="dist">
		<copy file="${dist.dir}/caNanoLab.war" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${dist.dir}/common/caNanoLab_modules.cli" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${dist.dir}/common/caNanoLab_checks.cli" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${dist.dir}/common/caNanoLab_logging.cli" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${dist.dir}/common/caNanoLab_setup.cli" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${dist.dir}/common/caNanoLab_deploy.cli" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${commonlib.dir}/mysql-connector-j-8.0.31.jar" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${commonlib.dir}/bcprov-jdk15on-1.69.jar" todir="${jboss.artifacts.dir}" overwrite="true"/>
		<copy file="${dist.dir}/common/wikihelp.properties" todir="${jboss.help.dir}" overwrite="true"/>
	</target>

	<target name="jar:helpers" depends="compile">
		<!-- caNanoLab.properties -->
		<copy overwrite="true" tofile="${build.dir}/WEB-INF/classes/caNanoLab.properties"
			  file="/src/main/config/caNanoLab.properties.template">
			<!-- replace tokens with values from build properties -->
			<filterset refid="properties.filterset"/>
		</copy>
		<!-- package jar file -->
		<jar destfile="${dist.dir}/caNanoLab-helpers.jar" basedir="${build.dir}/WEB-INF/classes"
			 includes="**/AccessibilityBean.class, **/UserBean.class, **/*Exception.class, **/SecurityService.class, **/*Helper*.class, **/ClassUtils.class, **/StringUtils.class, **/TextMatchMode.class, **/Constants.class, **/PropertyUtils.class, caNanoLab.properties.template"
			 excludes="**/AdvancedSampleServiceHelper.class"/>
	</target>

	<target name="jar:orm">
		<!-- package jar file -->
		<jar destfile="${dist.dir}/caNanoLabSDK-orm.jar" basedir="${src.dir}"
			 includes="**/*hbm.xml, ehcache.xml, hibernate.cfg.xml"/>
	</target>

	<target name="jar:beano" depends="clean, compile-beans">
		<jar destfile="${commonlib.dir}/caNanoLab-beans.jar" basedir="${domainbuild.dir}"/>
	</target>

	<target name="jar:endNote" depends="clean, compile">
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src-cfg}">
				<include name="**/*.properties"/>
				<exclude name="caNanoLab.properties"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
				<exclude name="caNanoLab.csm.new.hibernate.cfg.xml"/>
				<exclude name="hibernate.cfg.xml"/>
			</fileset>
		</copy>

		<!-- copy dependency jars to WEB-INF/lib files  -->
		<copy todir="${build.dir}/WEB-INF/lib">
			<fileset dir="${deps.dir}/runtime"/>
		</copy>

		<!-- copy jars from common/lib -->
		<!--		<copy todir="${build.dir}/WEB-INF/lib">-->
		<!--			<fileset dir="${common.dir}/lib/sdk">-->
		<!--				<include name="**/*.jar" />-->
		<!--			</fileset>-->
		<!--		</copy>-->

		<!--		<copy todir="${build.dir}/WEB-INF/lib">-->
		<!--			<fileset dir="${globus.dir}">-->
		<!--				<include name="**/log4*.jar"/>-->
		<!--			</fileset>-->
		<!--		</copy>-->

		<copy todir="${build.dir}/WEB-INF/lib">
			<fileset dir="${db.dir}">
				<include name="**/mysql*.jar"/>
			</fileset>
		</copy>

		<jar destfile="${dist.dir}/endNoteParser.jar" basedir="${classes.dir}" duplicate="preserve">
			<manifest>
				<attribute name="Main-Class" value="test.EndNoteParser"/>
				<attribute name="Class-Path" value="conf/conf.jar"/>
			</manifest>
			<zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>
		</jar>
	</target>

	<target name="compile-test" depends="clean, init">
		<echo message="*****************************************************"/>
		<echo message="**   Compiling Junit Java Classes ...          		  **"/>
		<echo message="*****************************************************"/>
		<path id="classpath">
			<fileset refid="compiletime.dependencies"/>
			<!--			<fileset dir="${common.dir}/lib">-->
			<fileset dir="${commonlib.dir">
				<exclude name="**/sdk/*.jar"/>
				<exclude name="**/ant-contrib-*.jar"/>
				<exclude name="**/log4j-1.2.13.jar" />
			</fileset>
		</path>
		<javac destdir="${build.dir}/WEB-INF/classes" debug="true" source="1.8" target="1.8">
			<classpath refid="classpath"/>
			<classpath refid="test.classpath"/>
			<src path="${src.dir}"/>
			<src path="${test.src.dir}"/>
		</javac>
	</target>

	<target name="junit" depends="compile-test">
		<delete dir="${report.dir}" failonerror="true"/>
		<mkdir dir="${report.dir}"/>
		<junit printsummary="true" failureproperty="junit.failure" haltonfailure='false'>
			<classpath>
				<path refid="test.classpath"/>
				<path refid="classpath"/>
				<!-- Do not put the following inside test.classpath-->
				<pathelement path="${classes.dir}"/>
				<!--
		 	     	<pathelement path="${basedir}/WebContent/WEB-INF"/>
		 	     	<pathelement path="${resources.dir}"/> -->
				<pathelement path="${test.dir}/resources"/>

			</classpath>

			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${test.src.dir}" includes="**/*Test.java"
						 excludes="**/PropertyUtilTest.java, **/RestValidatorTest.java,
		 			 	**/SimplePublicationWithSamplesBeanTest.java, **/SearchSampleBOTest.java"/>
			</batchtest>
			<formatter type="xml"/>
		</junit>
	</target>

	<target name="junitreport" depends="junit">
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}" includes="TEST-*.xml"/>
			<report todir="${report.dir}"/>
		</junitreport>
	</target>

</project>